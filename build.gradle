plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.150'
}

version = mod_version
group = mod_group_id

repositories {
    // EMI
    maven { name = "TerraformersMC"; url = "https://maven.terraformersmc.com/" }
    // Sponge
    maven { url 'https://repo.spongepowered.org/maven/' }
    // Mod Maven
    maven { url 'https://modmaven.dev/' }
    // Curse Maven
    maven { url = "https://www.cursemaven.com" }
    // Blame Jared
    maven { url 'https://maven.blamejared.com' }
    // SAPS
    maven { url "https://maven.saps.dev/releases/" }
    // LOCAL MAVEN
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

def dependencyMap = [
    ArsNoveau: ["curse.maven:ars-nouveau-401955:${an_version}"],
    Create: ["curse.maven:create-328085:${create_version}"],
    Mekanism: ["curse.maven:mekanism-268560:${mekanism_version}"],
    Occultism: [
        "curse.maven:occultism-361026:${occultism_version}",
        "curse.maven:geckolib-388172:${geckolib_version}",
        "curse.maven:modonomicon-538392:${modonomicon_version}",
        "curse.maven:smartbrainlib-661293:${smartbrainlib_version}"
    ],
    Thermal: [
        "curse.maven:thermal-expansion-69163:${thermal_expansion_version}",
        "curse.maven:thermal-foundation-222880:${thermal_foundation_version}",
        "curse.maven:cofh-core-69162:${cofh_core_version}"
    ]
]

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'net.neoforged.gradle.userdev'

    java.toolchain.languageVersion = JavaLanguageVersion.of(21)

    repositories {
        // EMI
        maven { name = "TerraformersMC"; url = "https://maven.terraformersmc.com/" }
        // Sponge
        maven { url 'https://repo.spongepowered.org/maven/' }
        // Mod Maven
        maven { url 'https://modmaven.dev/' }
        // Curse Maven
        maven { url = "https://www.cursemaven.com" }
        // Blame Jared
        maven { url 'https://maven.blamejared.com' }
        // SAPS
        maven { url "https://maven.saps.dev/releases/" }
        // LOCAL MAVEN
        mavenLocal()
    }

    dependencies {
        implementation "net.neoforged:neoforge:${neo_version}"

        // EMI for NeoForge
        compileOnly "dev.emi:emi-neoforge:${emi_version}+1.21:api"
        runtimeOnly "dev.emi:emi-neoforge:${emi_version}+1.21"

        dependencyMap[project.name.substring(0, project.name.indexOf(" "))].forEach {
            implementation it
        }
    }

    sourceSets {
        main {
            java {
                srcDir("src/java")
            }
            resources {
                srcDir("src/resources")
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforge, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // EMI for NeoForge
    compileOnly "dev.emi:emi-neoforge:${emi_version}+1.21:api"
    runtimeOnly "dev.emi:emi-neoforge:${emi_version}+1.21"

    // Utilities and other mods
    if (tool_kit_version != "null") runtimeOnly "curse.maven:tool-kit-324888:${tool_kit_version}"
    if (world_stripper_version != "null") runtimeOnly "curse.maven:world-stripper-250603:${world_stripper_version}"
    if (the_one_probe_version != "null") runtimeOnly "curse.maven:the-one-probe-245211:${the_one_probe_version}"
    if (the_undergarden_version != "null") runtimeOnly "curse.maven:the-undergarden-379849:${the_undergarden_version}"

    //TODO: Add to proper mods and remove when necessary.
//    runtimeOnly "curse.maven:curios-309927:${curios_version}"
//    runtimeOnly "curse.maven:patchouli-306770:${patchouli_version}"
//    runtimeOnly "curse.maven:immersive-engineering-231951:3963698"

    // Addons
    subprojects.forEach {
        runtimeOnly it
    }

    // Examples from the default build.gradle for NeoForge
    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Manifest Attributes
jar {
    manifest {
        attributes([
                "MixinConfigs"            : "emendatusenigmatica.mixins.json",
                "Specification-Title"     : "emendatusenigmatica",
                "Specification-Vendor"    : "Ridanisaurus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Ridanisaurus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neo_version             : neo_version,
            neo_version_range       : neo_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_version             : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
//TODO: Add Publishing configuration. Going to skip this one for now.
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
